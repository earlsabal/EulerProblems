// Project Euler Problem 2 Description

// Each new term in the Fibonacci sequence is generated by adding the previous
// two terms. By starting with 1 and 2, the first 10 terms will be:

// 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

// By considering the terms in the Fibonacci sequence whose values do not exceed
// four million, find the sum of the even-valued terms.


public class EvenFibonacciNumbers {
	public int sumOfEvens(int max) {
		int previous = 1;
		int currentNum = 2;
		int nextNum = 2;
		
		int sum = 0;
		while (currentNum <= max) {
			if (nextNum % 2 == 0) { sum += nextNum; }
			nextNum = previous + currentNum;
			previous = currentNum;
			currentNum = nextNum;
		}
		return sum;
	}

	public static void main(String[] args) {

		long startTime = System.nanoTime();
		EvenFibonacciNumbers test = new EvenFibonacciNumbers();
		System.out.println(test.sumOfEvens(4000000));
    long elapsedTime = System.nanoTime() - startTime;
    double seconds = (double)elapsedTime / 1000000000.0;
    System.out.println(seconds);
		
		// Answer: 4613732
    // Time Elasped: 0.000761384
    
  }
}